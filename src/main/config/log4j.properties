### 根配置 ###
#	log4j.rootLogger = [ level ], appenderName1, appenderName2, ...
#	level : fatal, error, warn, info, debug
log4j.rootLogger = debug, CONSOLE

### 输出模式 ###
#	log4j.appender.appenderName = 输出模式
#	org.apache.log4j.ConsoleAppender（控制台）
#	org.apache.log4j.FileAppender（文件）
#	org.apache.log4j.DailyRollingFileAppender（每天产生一个日志文件）
#	org.apache.log4j.RollingFileAppender（文件大小到达指定尺寸的时候产生一个新的文件）
#	org.apache.log4j.WriterAppender（将日志信息以流格式发送到任意指定的地方）
log4j.appender.CONSOLE = org.apache.log4j.ConsoleAppender

### 输出格式 ###
#	log4j.appender.appenderName.layout = 输出格式
#	org.apache.log4j.HTMLLayout（以HTML表格形式布局）
#	org.apache.log4j.PatternLayout（可以灵活地指定布局模式）
#	org.apache.log4j.SimpleLayout（包含日志信息的级别和信息字符串）
#	org.apache.log4j.TTCCLayout（包含日志产生的时间、线程、类别等等信息）
log4j.appender.CONSOLE.layout = org.apache.log4j.PatternLayout

### 输出格式配置 ###
#	%m	消息
#	%p	输出级别，即DEBUG、INFO、WARN、ERROR、FATAL 
#	%r	该日志耗费的毫秒数 
#	%c	所属的类目，即所在类的全名 
#	%t	线程名 
#	%n	回车换行符 
#	%d	日期。默认格式为ISO8601。自定义格式：%d{yyyy-MM-dd HH:mm:ss}，输出结果：2016-04-08 09:59:12  
#	%l	发生的位置。包括类目名、发生的线程，以及在代码中的行数。Testlog4.main(TestLog4.java:10)
log4j.appender.CONSOLE.layout.ConversionPattern = %d{yyyy-MM-dd HH:mm:ss} [ %p ] %m%n

### 文件输出的位置 ###
#	log4j.appender.appenderName.File = logs/log.log
### 文件输出是否为追加 ###
#	log4j.appender.appenderName.Append = true
### 输出的级别 ###
#	log4j.appender.appenderName.Threshold = level